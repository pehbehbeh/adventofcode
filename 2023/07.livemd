<!-- livebook:{"file_entries":[{"name":"04.txt","type":"attachment"}]} -->

# Advent of Code 2023 - Day 07

```elixir
Mix.install([
  {:kino, "~> 0.11.0"},
  {:kino_aoc, github: "ljgago/kino_aoc"},
  {:explorer, "~> 0.7.0"},
  {:kino_explorer, "~> 0.1.10"}
])
```

## Input

<!-- livebook:{"attrs":{"assign_to":"puzzle_input","day":"7","session_secret":"AOC_SESSION","year":"2023"},"chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, puzzle_input} =
  KinoAOC.download_puzzle("2023", "7", System.fetch_env!("LB_AOC_SESSION"))
```

```elixir
require Explorer.DataFrame, as: DF
alias Explorer.Series

{hands, bids} =
  puzzle_input
  |> String.split(["\n", " "])
  |> Enum.chunk_every(2)
  |> Enum.map(&List.to_tuple/1)
  |> Enum.unzip()

init_df =
  DF.new(hand: hands, bid: bids)
  |> DF.mutate(bid: Series.cast(bid, :integer))
```

```elixir
hands_to_cards = fn hands, j_value ->
  hands
  |> Enum.map(fn hand ->
    String.split(hand, "", trim: true)
    |> Enum.map(fn
      "A" -> 14
      "K" -> 13
      "Q" -> 12
      "J" -> j_value
      "T" -> 10
      x -> String.to_integer(x)
    end)
  end)
  |> Enum.zip_with(&Function.identity/1)
end

put_cards = fn df, j_value ->
  hands = Series.to_list(df["hand"])
  [c1, c2, c3, c4, c5] = hands_to_cards.(hands, j_value)

  df
  |> DF.put(:c1, Series.from_list(c1))
  |> DF.put(:c2, Series.from_list(c2))
  |> DF.put(:c3, Series.from_list(c3))
  |> DF.put(:c4, Series.from_list(c4))
  |> DF.put(:c5, Series.from_list(c5))
end

put_strengths = fn df, mapper ->
  {strengths, types} =
    df
    |> DF.select(["c1", "c2", "c3", "c4", "c5"])
    |> DF.to_columns()
    |> Map.values()
    |> Enum.zip_with(&Function.identity/1)
    |> Enum.map(&Enum.sort(&1, :desc))
    |> Enum.map(mapper)
    |> Enum.unzip()

  df
  |> DF.put(:type, Series.from_list(types))
  |> DF.put(:strength, Series.from_list(strengths))
end

put_ranks = fn df ->
  total = Series.size(df["hand"])
  ranks = Enum.to_list(1..total)

  df
  |> DF.arrange(desc: strength, desc: c1, desc: c2, desc: c3, desc: c4, desc: c5)
  |> DF.put(:rank, Series.from_list(ranks))
  |> DF.mutate_with(&[rank: Series.subtract(total + 1, &1["rank"])])
  |> DF.mutate_with(&[winnings: Series.multiply(&1["rank"], &1["bid"])])
end
```

## Part 1

```elixir
results =
  init_df
  |> put_cards.(11)
  |> put_strengths.(fn
    [a, a, a, a, a] -> {6, "five_of_a_kind"}
    [a, a, a, a, _] -> {5, "four_of_a_kind"}
    [_, a, a, a, a] -> {5, "four_of_a_kind"}
    [a, a, a, b, b] -> {4, "full_house"}
    [a, a, b, b, b] -> {4, "full_house"}
    [a, a, a, _, _] -> {3, "three_of_a_kind"}
    [_, a, a, a, _] -> {3, "three_of_a_kind"}
    [_, _, a, a, a] -> {3, "three_of_a_kind"}
    [a, a, b, b, _] -> {2, "two_pair"}
    [a, a, _, b, b] -> {2, "two_pair"}
    [_, a, a, b, b] -> {2, "two_pair"}
    [a, a, _, _, _] -> {1, "one_pair"}
    [_, a, a, _, _] -> {1, "one_pair"}
    [_, _, a, a, _] -> {1, "one_pair"}
    [_, _, _, a, a] -> {1, "one_pair"}
    [_, _, _, _, _] -> {0, "high_card"}
  end)
  |> put_ranks.()
  |> DF.select(["hand", "type", "rank", "bid", "winnings"])
```

```elixir
DF.summarise(results, total_winnings: sum(winnings))
```

## Part 2

```elixir
results =
  init_df
  |> put_cards.(1)
  |> put_strengths.(fn
    [a, a, a, a, a] -> {6, "five_of_a_kind"}
    [a, a, a, a, 1] -> {6, "five_of_a_kind"}
    [a, a, a, 1, 1] -> {6, "five_of_a_kind"}
    [a, a, 1, 1, 1] -> {6, "five_of_a_kind"}
    [_, 1, 1, 1, 1] -> {6, "five_of_a_kind"}
    [a, a, a, a, _] -> {5, "four_of_a_kind"}
    [_, a, a, a, a] -> {5, "four_of_a_kind"}
    [a, a, a, _, 1] -> {5, "four_of_a_kind"}
    [_, a, a, a, 1] -> {5, "four_of_a_kind"}
    [a, a, _, 1, 1] -> {5, "four_of_a_kind"}
    [_, a, a, 1, 1] -> {5, "four_of_a_kind"}
    [_, _, 1, 1, 1] -> {5, "four_of_a_kind"}
    [a, a, a, b, b] -> {4, "full_house"}
    [a, a, b, b, b] -> {4, "full_house"}
    [a, a, a, _, 1] -> {4, "full_house"}
    [a, a, b, b, 1] -> {4, "full_house"}
    [a, a, b, b, 1] -> {4, "full_house"}
    [a, a, _, 1, 1] -> {4, "full_house"}
    [a, a, a, _, _] -> {3, "three_of_a_kind"}
    [_, a, a, a, _] -> {3, "three_of_a_kind"}
    [_, _, a, a, a] -> {3, "three_of_a_kind"}
    [a, a, _, _, 1] -> {3, "three_of_a_kind"}
    [_, a, a, _, 1] -> {3, "three_of_a_kind"}
    [_, _, a, a, 1] -> {3, "three_of_a_kind"}
    [_, _, _, 1, 1] -> {3, "three_of_a_kind"}
    [a, a, b, b, _] -> {2, "two_pair"}
    [a, a, _, b, b] -> {2, "two_pair"}
    [_, a, a, b, b] -> {2, "two_pair"}
    [a, a, _, _, 1] -> {2, "two_pair"}
    [a, a, _, _, _] -> {1, "one_pair"}
    [_, a, a, _, _] -> {1, "one_pair"}
    [_, _, a, a, _] -> {1, "one_pair"}
    [_, _, _, a, a] -> {1, "one_pair"}
    [_, _, _, _, 1] -> {1, "one_pair"}
    [_, _, _, _, _] -> {0, "high_card"}
  end)
  |> put_ranks.()
  |> DF.select(["hand", "type", "rank", "bid", "winnings"])
```

```elixir
DF.summarise(results, total_winnings: sum(winnings))
```

[![Run in Livebook](https://livebook.dev/badge/v1/blue.svg)](https://livebook.dev/run?url=https%3A%2F%2Fgithub.com%2Fpehbehbeh%2Fadventofcode%2Fblob%2Fmain%2F2023%2F07.livemd)

<!-- livebook:{"offset":5116,"stamp":{"token":"XCP.da2Fh26_151nFW4sAEHNDPuwFoKi35A-rrVnSZ7R9FSruiyTm57pobO6cg_HgC-KR6UBjeKsfvu8di8vPVd8RTiaQMI6hDOIoTE_SzK-87IkTEp1Pb8","version":2}} -->
