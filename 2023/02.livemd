<!-- livebook:{"file_entries":[{"name":"02.txt","type":"attachment"}]} -->

# Advent of Code 2023 - Day 02

```elixir
Mix.install([
  {:kino, "~> 0.11.0"}
])
```

## Part 1

```elixir
max = %{"red" => 12, "green" => 13, "blue" => 14}

parse_line = fn line ->
  ["Game " <> id, rest] = String.trim(line) |> String.split(": ")

  sets =
    String.split(rest, "; ")
    |> Enum.map(fn set ->
      String.split(set, ", ")
      |> Enum.into(%{}, fn cubes ->
        [count, color] = String.split(cubes, " ")
        {color, String.to_integer(count)}
      end)
    end)

  {String.to_integer(id), sets}
end

max_cubes = fn {id, sets} ->
  result =
    Enum.reduce(sets, %{}, fn set, acc ->
      Map.merge(set, acc, fn _k, v1, v2 -> max(v1, v2) end)
    end)

  {id, result}
end

Kino.FS.file_path("02.txt")
|> File.stream!()
|> Stream.map(parse_line)
|> Stream.map(max_cubes)
|> Enum.reduce(0, fn {id, cubes}, acc ->
  possible? =
    Enum.reduce_while(cubes, true, fn {color, count}, _ ->
      if count > max[color], do: {:halt, false}, else: {:cont, true}
    end)

  if possible?, do: acc + id, else: acc
end)
```

## Part 2

```elixir
Kino.FS.file_path("02.txt")
|> File.stream!()
|> Stream.map(parse_line)
|> Stream.map(max_cubes)
|> Enum.reduce(0, fn {_id, cubes}, acc_power ->
  power = Map.values(cubes) |> Enum.reduce(1, &Kernel.*/2)
  acc_power + power
end)
```
