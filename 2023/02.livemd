# Advent of Code 2023 - Day 02

```elixir
Mix.install([
  {:kino, "~> 0.11.0"},
  {:kino_aoc, github: "ljgago/kino_aoc"}
])
```

## Input

<!-- livebook:{"attrs":{"assign_to":"puzzle_input","day":"2","session_secret":"AOC_SESSION","year":"2023"},"chunks":null,"kind":"Elixir.KinoAOC.HelperCell","livebook_object":"smart_cell"} -->

```elixir
{:ok, puzzle_input} =
  KinoAOC.download_puzzle("2023", "2", System.fetch_env!("LB_AOC_SESSION"))
```

```elixir
games =
  puzzle_input
  |> String.split("\n")
  |> Enum.map(fn line ->
    [_ | rest] = String.split(line, [": ", "; "])

    Enum.map(rest, fn set ->
      String.split(set, ", ")
      |> Enum.into(%{}, fn cubes ->
        [count, color] = String.split(cubes, " ")
        {color, String.to_integer(count)}
      end)
    end)
  end)
```

```elixir
max_cubes =
  games
  |> Enum.map(fn sets ->
    Enum.reduce(sets, %{}, fn set, acc ->
      Map.merge(set, acc, fn _k, v1, v2 -> max(v1, v2) end)
    end)
  end)
```

## Part 1

```elixir
max = %{"red" => 12, "green" => 13, "blue" => 14}

max_cubes
|> Stream.with_index(1)
|> Stream.reject(fn {cubes, _i} ->
  Enum.any?(cubes, fn {color, count} -> count > max[color] end)
end)
|> Stream.map(fn {_cubes, i} -> i end)
|> Enum.sum()
```

## Part 2

```elixir
max_cubes
|> Stream.map(fn cubes -> Map.values(cubes) |> Enum.product() end)
|> Enum.sum()
```

[![Run in Livebook](https://livebook.dev/badge/v1/blue.svg)](https://livebook.dev/run?url=https%3A%2F%2Fgithub.com%2Fpehbehbeh%2Fadventofcode%2Fblob%2Fmain%2F2023%2F02.livemd)

<!-- livebook:{"offset":1536,"stamp":{"token":"XCP.9bk7xgJn7ZGnA5Zhe3tRWZky82sp7cHse8bhPGoO_ZHGr1huf6NTz1ZPStS0g77uNxHG_zwUFO8L6XKtWskkjRg3sqfljq-GhkFe_y6XDd809ic16u8","version":2}} -->
