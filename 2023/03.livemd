<!-- livebook:{"file_entries":[{"name":"03.txt","type":"attachment"}]} -->

# Advent of Code 2023 - Day 03

```elixir
Mix.install([
  {:kino, "~> 0.11.0"}
])
```

## Input

```elixir
input =
  Kino.FS.file_path("03.txt")
  |> File.read!()
  |> String.split("\n")
```

```elixir
numbers =
  Enum.with_index(input)
  |> Enum.flat_map(fn {line, y} ->
    Regex.scan(~r/\d+/, line, return: :index)
    |> List.flatten()
    |> Enum.map(fn {x, length} ->
      {(x - 1)..(x + length), (y - 1)..(y + 1),
       String.slice(line, x, length) |> String.to_integer()}
    end)
  end)
```

```elixir
symbols =
  Enum.with_index(input)
  |> Enum.flat_map(fn {line, y} ->
    Regex.scan(~r/[^\d^\.]/, line, capure: :all_but_first, return: :index)
    |> List.flatten()
    |> Enum.map(fn {x, _} -> {x, y, String.slice(line, x, 1)} end)
  end)
```

## Part 1

```elixir
list_adjacent_numbers = fn x, y, numbers ->
  numbers
  |> Stream.filter(fn {cols, rows, _number} -> x in cols and y in rows end)
  |> Enum.map(fn {_rows, _cols, number} -> number end)
end

symbols
|> Stream.flat_map(fn {x, y, _symbol} -> list_adjacent_numbers.(x, y, numbers) end)
|> Enum.sum()
```

## Part 2

```elixir
symbols
|> Stream.filter(fn {_x, _y, symbol} -> symbol == "*" end)
|> Stream.map(fn {x, y, _symbol} -> list_adjacent_numbers.(x, y, numbers) end)
|> Stream.filter(fn numbers -> Enum.count(numbers) == 2 end)
|> Stream.map(fn [a, b] -> a * b end)
|> Enum.sum()
```

[![Run in Livebook](https://livebook.dev/badge/v1/blue.svg)](https://livebook.dev/run?url=https%3A%2F%2Fgithub.com%2Fpehbehbeh%2Fadventofcode%2Fblob%2Fmain%2F2023%2F03.livemd)
