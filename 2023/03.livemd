<!-- livebook:{"file_entries":[{"name":"03.txt","type":"attachment"}]} -->

# Advent of Code 2023 - Day 03

```elixir
Mix.install([
  {:kino, "~> 0.11.0"}
])
```

## Input

```elixir
input =
  Kino.FS.file_path("03.txt")
  |> File.read!()
  |> String.split("\n")
```

```elixir
numbers =
  Enum.with_index(input)
  |> Enum.flat_map(fn {line, y} ->
    Regex.scan(~r/\d+/, line, return: :index)
    |> List.flatten()
    |> Enum.map(fn {x, length} ->
      {(x - 1)..(x + length), (y - 1)..(y + 1),
       String.slice(line, x, length) |> String.to_integer()}
    end)
  end)
```

```elixir
symbols =
  Enum.with_index(input)
  |> Enum.flat_map(fn {line, y} ->
    Regex.scan(~r/[^\d^\.]/, line, capure: :all_but_first, return: :index)
    |> List.flatten()
    |> Enum.map(fn {x, _} -> {x, y, String.slice(line, x, 1)} end)
  end)
```

## Part 1

```elixir
list_adjecent_numbers = fn x, y, all ->
  Enum.reduce(all, [], fn {cols, rows, number}, acc ->
    if x in cols and y in rows, do: [number | acc], else: acc
  end)
end

Enum.reduce(symbols, 0, fn {x, y, _symbol}, acc ->
  numbers = list_adjecent_numbers.(x, y, numbers)
  acc + Enum.sum(numbers)
end)
```

## Part 2

```elixir
Stream.filter(symbols, fn {_x, _y, symbol} -> symbol == "*" end)
|> Stream.map(fn {x, y, _symbol} ->
  numbers = list_adjecent_numbers.(x, y, numbers)
  {x, y, numbers}
end)
|> Stream.filter(fn {_, _, numbers} -> Enum.count(numbers) == 2 end)
|> Enum.reduce(0, fn {_, _, [first, second]}, acc ->
  acc + first * second
end)
```
